# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

insmod regexp

function esc {
	if [ -n "$2" ]; then
		echo -e "\n${2}"
	fi
	if [ "$1" == "1" ]; then
		echo -e -n "\n${escreturnmsg}"
	elif [ "$1" == "2" ]; then
		echo -e -n "\n${esccontinuemsg}"
	fi
	sleep -i -v 999999
}

function escctrl {
	if keystatus --ctrl; then
		configfile ${prefix}/Main.cfg
	fi
}

function helpmenu {
	set pager=1
	if test -e $prefix/locale/${lang}_${1}.cfg; then cat --dos $prefix/locale/${lang}_${1}.cfg;
	else cat --dos $prefix/locale/en_${1}.cfg; fi
	esc 1
	set pager=0
}

#function linuxefi {
#	linux $@
#}

#function initrdefi {
#	initrd $@
#}

function strcontains {
	set str="$1"
	set pattern="$2"
	if regexp ".*${pattern}.*" "$str"; then
		return 0;
	else
		return 1;
	fi
}

function WinLegacy {
	if [ x$scheme = xmsdos ] -o [ -n "$cd" ]; then
		ntldr /AIO/Tools/MS/bootmgr
	else
		configfile /AIO/Menu/WinLegacy.cfg
	fi
}
function WinUEFI {
	if [ -n "$cd" ]; then
		chainloader /EFI/CLOVER/tools/Shell64.efi
	else
		chainloader /EFI/BOOT/WinPE_${_SPEC_UEFI_ARCH}.efi
	fi
}

function booting {
	echo -e "${loadingiso} ${1}"
}

function beforeins {
	echo
	echo -e "${beforeins}"
	echo
	ls -l
	echo "${escctrll}"
	esc 2
	escctrl
}

function freebsd_ufs_variants {
	
	menuentry "[1] FreeBSD ($2 - $1) (Default boot loader)" $1 --hotkey=1 {
	    set root="$2"
	    kfreebsd /boot/loader
	}
	
	if test -e ($1)/boot/kernel/kernel; then set kernel="/boot/kernel/kernel"; elif
	test -e ($1)/boot/kernel/kernel.gz; then set kernel="/boot/kernel/kernel.gz"; fi
	if [ -n "$kernel" ]; then
		menuentry "[2] FreeBSD ($2 - $1)" $1 $3 $kernel --hotkey=2 {
			set root="$2"
			kfreebsd $4
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$3
			kfreebsd_loadenv /boot/device.hints
		}

		menuentry "[3] FreeBSD ($2 - $1) (single)" $1 $3 $kernel --hotkey=3 {
			set root="$2"
			kfreebsd $4 -s
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$3
			kfreebsd_loadenv /boot/device.hints
		}

		menuentry "[4] FreeBSD ($2 - $1) (verbose)" $1 $3 $kernel --hotkey=4 {
			set root="$2"
			kfreebsd $4 -v
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$3
			kfreebsd_loadenv /boot/device.hints
		}

		menuentry "[5] FreeBSD ($2 - $1) (no ACPI)" $1 $3 $kernel --hotkey=5 {
			set root="$2"
			kfreebsd $4 -v
			unset kFreeBSD.acpi_load
			set kFreeBSD.hint.acpi.0.disabled=1
			set kFreeBSD.loader.acpi_disabled_by_user=1
			set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$3
			kfreebsd_loadenv /boot/device.hints
		}

		menuentry "[6] FreeBSD ($2 - $1) (safe mode)" $1 $3 $kernel --hotkey=6 {
			set root="$2"
			kfreebsd $4 -v
			unset kFreeBSD.acpi_load
			set kFreeBSD.hint.acpi.0.disabled=1
			set kFreeBSD.loader.acpi_disabled_by_user=1
			set kFreeBSD.hint.apic.0.disabled=1
			set kFreeBSD.hw.ata.ata_dma=0
			set kFreeBSD.hw.ata.atapi_dma=0
			set kFreeBSD.hw.ata.wc=0
			set kFreeBSD.hw.eisa_slots=0
			set kFreeBSD.hint.kbdmux.0.disabled=1
			set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$3
			kfreebsd_loadenv /boot/device.hints
		}
		unset kernel
	else
		set timeout=0
	fi
}

function freebsd_zfs_variants {
	
	menuentry "[1] FreeBSD (zfs - $1) (Default boot loader)" $1 --hotkey=1 {
	    set root="$2"
	    kfreebsd /@/boot/loader
	}
	
	if test -e ($1)/@/boot/kernel/kernel; then set kernel="/@/boot/kernel/kernel"; elif
	test -e ($1)/@/boot/kernel/kernel.gz; then set kernel="/@/boot/kernel/kernel.gz"; fi
	if [ -n "$kernel" ]; then
		menuentry "[2] FreeBSD (zfs - $1)" $1 $kernel --hotkey=2 {
			set root="$2"
			kfreebsd $3
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
			kfreebsd_module_elf /@/boot/kernel/zfs.ko
			kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
			probe -l -s name $root
			set kFreeBSD.vfs.root.mountfrom=zfs:$name
			kfreebsd_loadenv /@/boot/device.hints
		}

		menuentry "[3] FreeBSD (zfs - $1) (single)" $1 $kernel --hotkey=3 {
			set root="$2"
			kfreebsd $3 -s
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
			kfreebsd_module_elf /@/boot/kernel/zfs.ko
			kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
			probe -l -s name $root
			set kFreeBSD.vfs.root.mountfrom=zfs:$name
			kfreebsd_loadenv /@/boot/device.hints
		}

		menuentry "[4] FreeBSD (zfs - $1) (verbose)" $1 $kernel --hotkey=4 {
			set root="$2"
			kfreebsd $3 -v
			set kFreeBSD.acpi_load=YES
			set kFreeBSD.hint.acpi.0.disabled=0
			kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
			kfreebsd_module_elf /@/boot/kernel/zfs.ko
			kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
			probe -l -s name $root
			set kFreeBSD.vfs.root.mountfrom=zfs:$name
			kfreebsd_loadenv /@/boot/device.hints
		}

		menuentry "[5] FreeBSD (zfs - $1) (no ACPI)" $1 $kernel --hotkey=5 {
			set root="$2"
			kfreebsd $3 -v
			unset kFreeBSD.acpi_load
			set kFreeBSD.hint.acpi.0.disabled=1
			set kFreeBSD.loader.acpi_disabled_by_user=1
			kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
			kfreebsd_module_elf /@/boot/kernel/zfs.ko
			kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
			probe -l -s name $root
			set kFreeBSD.vfs.root.mountfrom=zfs:$name
			kfreebsd_loadenv /@/boot/device.hints
		}

		menuentry "[6] FreeBSD (zfs - $1) (safe mode)" $1 $kernel --hotkey=6 {
			set root="$2"
			kfreebsd $3 -v
			unset kFreeBSD.acpi_load
			set kFreeBSD.hint.acpi.0.disabled=1
			set kFreeBSD.loader.acpi_disabled_by_user=1
			set kFreeBSD.hint.apic.0.disabled=1
			set kFreeBSD.hw.ata.ata_dma=0
			set kFreeBSD.hw.ata.atapi_dma=0
			set kFreeBSD.hw.ata.wc=0
			set kFreeBSD.hw.eisa_slots=0
			set kFreeBSD.hint.kbdmux.0.disabled=1
			kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
			kfreebsd_module_elf /@/boot/kernel/zfs.ko
			kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
			probe -l -s name $root
			set kFreeBSD.vfs.root.mountfrom=zfs:$name
			kfreebsd_loadenv /@/boot/device.hints
		}
		unset kernel
	else
		set timeout=0
	fi
}

function grub4dosroot {
	if [ -z "$1" ]; then
		set device="${root}"
	else
		set device="${1}"
	fi
	probe -f -s fstype $device
	if [ "${fstype}" != "iso9660" ]; then
		probe -p -s hdscheme $device
		regexp -s 1:disknum -s 2:partnum "(.*),${hdscheme}([0-9]+)" "$device"
		regexp -s partnum "([0-9]+).${partnum}" "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
		set g4droot="(${disknum},${partnum})"
		unset disknum
		unset partnum
		unset hdscheme
	else set g4droot="(${device})"; fi
	unset device
	unset fstype
}

function drivemap_to_hd0 {
	if [ -z "$1" ]; then
		set device="${root}"
	else
		set device="${1}"
	fi
	if ! regexp -s disknum '^hd([0-9]+)' "$device"; then
		esc 1 "Only hard disks are supported."
		return 1
	fi
	if [ "$disknum" != "0" ]; then
		if [ "$disknum" == "1" ]; then
			drivemap -s (hd0) (hd1)
		else
			set arr="9 8 7 6 5 4 3 2 1"
			# 10 disks is enough?
			regexp -s arr "${disknum} (.*)" "$arr"
			drivemap -s (hd${disknum}) (hd0)
			set _disknum="$disknum"
			for num in $arr; do
				drivemap -s (hd${_disknum}) (hd${num})
				set _disknum=${num}
			done
			drivemap (hd0) (hd1)
			unset num
			unset _disknum
			unset arr
		fi
	fi
	unset disknum
	if [ -n "$2" ]; then
		# convert grub2 root to grub4dos root and set variable 2
		set _var="$2"
		probe -p -s hdscheme $device
		regexp -s partnum "^hd${disknum},${hdscheme}([0-9]+)" "$device"
		regexp -s partnum "([0-9]+).${partnum}" "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31"
		set $"${_var}"="(hd0,${partnum})"
		unset _var
		unset hdscheme
		unset partnum
	fi
	unset device
	return 0
}

function partimgentry {
	set hotkey="_"
	GetHotkey
	menuentry "[${hotkey}] ${1}" "$1" --hotkey="${hotkey}" {
		if strcontains "$2" " " ; then esc 1 "${filenamespace}";
		else
			if ! test -d (hd0,msdos1); then partnum="0"
			elif ! test -d (hd0,msdos2); then partnum="1"
			elif ! test -d (hd0,msdos3); then partnum="2"
			elif ! test -d (hd0,msdos4); then partnum="3"
			fi
			if [ -z "$partnum" ]; then esc 1 "${fullpart}";
			else
				loopback loopimg "/AIO/Files/PartIMG/${2}"
				probe -f -s parttype loopimg
				if [ -z "$parttype" ]; then
					esc 1
				else
					loopback -d loopimg
					regexp -s g4ddisk 'hd(.*),' "$root"
					grub4dosroot
					set fstype="0x00"
					if [ "${parttype}" == "ntfs" ] -o [ "${parttype}" == "exfat" ]; then fstype="0x07"
					elif [ "${parttype}" == "iso9660" ] -o [ "${parttype}" == "ext2" ] -o [ "${parttype}" == "xfs" ] -o [ "${parttype}" == "reiserfs" ]; then fstype="0x83"
					elif [ "${parttype}" == "hfs" ] -o [ "${parttype}" == "hfsplus" ]; then fstype="0xAF"
					elif [ "${parttype}" == "ufs1" ] -o [ "${parttype}" == "ufs2" ]; then
						fstype="0xA5"
						if test -f (loopimg)/netbsd; then fstype="0xA9"
						elif test -f (loopimg)/bsd; then fstype="0xA6"
						fi
					elif [ "${parttype}" == "jfs" ]; then fstype="0x35"
					fi
					set opt="root ${g4droot}; ${g4d_path}/partnew.g4b ${g4ddisk},${partnum} ${fstype} ${2} ${lang}"
					linux ${g4d_path}/grub.exe --config-file=${opt}
				fi
			fi
		fi
	}
	unset partnum
	unset parttype
	unset fstype
}

function GetConfigFile {
	for file in "/boot/grub/grub.cfg" "/efi/boot/grub.cfg" "/grub/grub.cfg"; do
		if test -e ($1)$file; then
			set hotkey="_"
			GetHotkey
			menuentry "[${hotkey}] Load ${file} ${on} (${1}) - ${2} - ${3} - ${4}" "$1" "$file" --hotkey="${hotkey}" {
				if [ -e (${2})/boot/grub/themes ] -o [ -e (${2})/boot/grub/fonts ] -o [ -e (${2})/boot/grub/locale ]	\
					 -o \
					[ -e (${2})/boot/grub/i386-efi ] -o [ -e (${2})/boot/grub/x86_64-efi ]; then
						set root=${2}
						set prefix="(${2})/boot/grub"
				fi
				configfile $3
			}
		fi
	done
}

function ntbootcmd {
	if [ "$2" == "wim" ]; then
		set _args="--testmode=no --wim"
	else
		set _args="--vhd"
	fi
	if [ -n "$pc" ]; then 
		ntboot ${_args} --efi=/AIO/Tools/MS/PXE/bootmgr "${1}"
	else
		if [ "$2" == "wim" ]; then
			if wimtools --is64 "${1}"; then set wimarch="64"; else set wimarch="32"; fi
			if [ "$_SPEC_UEFI_ARCH_3" != "$wimarch" ]; then
				esc 1 "$efi3264msg"
				return 1
			fi
		fi
		ntboot ${_args} --efi=/AIO/Tools/MS/PXE/x${_SPEC_UEFI_ARCH_2}/bootmgfw.efi "${1}"
	fi
}

function wimbootwinsetup {
	echo "${loading} ${1}... ${plswait}".
	if wimtools --is64 "${1}"; then
		set wimarch="64"
		set procarch="AMD64"
	else
		set wimarch="32"
		set procarch="x86"
	fi
	if [ "$pc" ]; then
		wimboot	\
			@:bootmgr:/AIO/Tools/MS/PXE/bootmgr					\
			@:bootmgr.exe:/AIO/Tools/MS/PXE/bootmgr.exe			\
			@:Lmsify${procarch}.exe:/AIO/Tools/winsetup/Lmsify${wimarch}.exe	\
			@:grubenv:/AIO/grub/grubenv	\
			@:Winpeshl.ini:/AIO/Tools/winsetup/Winpeshl.ini		\
			@:boot.wim:"${1}"
	else
		if [ "$_SPEC_UEFI_ARCH_3" != "$wimarch" ]; then
			esc 1 "$efi3264msg"
			return 1
		fi
		wimboot @:bootmgfw.efi:/AIO/Tools/MS/PXE/x${_SPEC_UEFI_ARCH_2}/bootmgfw.efi \
				@:Lmsify${procarch}.exe:/AIO/Tools/winsetup/Lmsify${wimarch}.exe	\
				@:grubenv:/AIO/grub/grubenv	\
				@:Winpeshl.ini:/AIO/Tools/winsetup/Winpeshl.ini	\
				@:boot.wim:"${1}";
	fi
	boot;
}

function ListWimBoot {
	echo "${wimmsg}"
	for file in /AIO/Files/WinPE/*.wim /AIO/Files/WinPE/*.WIM /AIO/Files/WinPE/*/*.wim /AIO/Files/WinPE/*/*.WIM; do
		if ! test -f "$file"; then continue; fi
		regexp -s filename "/AIO/Files/WinPE/(.*)" "$file"
		if [ -z "$havefile" ]; then set havefile="1"; fi
		set hotkey="_"
		GetHotkey
		menuentry "[${hotkey}] ${filename}" "$filename" --hotkey="${hotkey}" {
			wimboot "/AIO/Files/WinPE/${2}"
		}
	done
	if [ -z "$havefile" ]; then
		esc 2 "${nowim}"
	else
		unset havefile
		ReturnMainMenu;
	fi
	unset filename
}

function WindowsDetect {
    set saved_root=$root
	for dev in (hd*,*); do
		regexp -s device '\((.*)\)' $dev
		probe -s fstype -f $device
		if [ -z "$fstype" ] -o [ "$fstype" == "procfs" ]; then continue; fi
		probe -s tscheme -p $device
		if [ -n "$pc" ] -a [ "$tscheme" == "msdos" ]; then
			if test \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/boot/BCD ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/Boot/BCD ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/Bcd ')' \
				   -o \
				   '(' -f ($device)/bootmgr -a -f ($device)/BOOT/BCD ')' \
				; then
				set root="$device"
				ntldr /bootmgr
				boot
			elif test \
				   '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
				   -o \
				   '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
				; then
				set root="$device"
				drivemap_to_hd0 "$root"
				ntldr /ntldr
				boot
			fi
		elif [ -n "$efi" ] -a [ "$fstype" == "fat" ] -a [ "$tscheme" == "gpt" ] -a [ -f ($device)/EFI/Microsoft/Boot/bootmgfw.efi ] -a [ -f ($device)/EFI/Microsoft/Boot/BCD ]; then
			root="$device"
			chainloader /EFI/Microsoft/Boot/bootmgfw.efi
			boot
		fi
		unset tscheme
		unset fstype
    done
	set root=$saved_root
	esc 1 "${nowindows}"
}

function ChangeBackground {
	echo "${bgmsg}"
	for file in ${prefix}/themes/*; do
		if ! test -f "$file"; then continue; fi
		if [ "$file" == "${prefix}/themes/${bg}" ]; then continue; fi
		regexp -s filename "/AIO/grub/themes/(.*)" "$file"
		if [ -z "$havefile" ]; then set havefile="1"; fi
		set hotkey="_"
		GetHotkey
		menuentry "[${hotkey}] ${filename}" "$filename" --hotkey="${hotkey}" {
			bg="$2"
			background_image -m stretch "${prefix}/themes/${bg}"
			save_env bg
			configfile ${prefix}/Main.cfg
		}
	done
	if [ -z "$havefile" ]; then
		esc 2 "${nobg}"
	else
		unset havefile
		ReturnMainMenu;
	fi
	unset filename
}

function ChangeLanguage {
	set hotkey="_"
	for langstr in "vi=Tiếng Việt" "en=English" "ast=Asturian; Bable; Leonese; Asturleonese" "ca=català" "zh_CN=中文 (Simplified)" "zh_TW=中文 (Traditional)" "da=dansk" "nl=Dutch" "en@arabic=English - Arabic"				\
					"en@cyrillic=English - Cyrillic" "en@greek=English - Greek" "en@hebrew=English - Hebrew" "en@piglatin=English - Piglatin" "en@quot=English - Quot"			\
					"eo=Esperanto" "fi=Finnish" "fr=français" "gl=Galego" "de=Deutsch" "de@hebrew=German - Hebrew" "de_CH=German - SWITZERLAND (CH)" "hu=magyar"				\
					"hr=hrvatski jezik" "id=Bahasa Indonesia" "it=Italiano" "ja=日本語" "lt=lietuvių kalba" "nb=Norsk Bokmål" "no=Norwegian" "pl=Polish" "pt_BR=Português" "pa=Panjabi" "ru=русский" "sr=српски језик"	\
					"sl=Slovenian" "es=Español" "sv=Svenska" "tr=Türkçe" "uk=Українська"; do
		regexp -s 2:langname -s 1:langcode '(.*)=(.*)' "$langstr"
		if [ "$langcode" == "$lang" ] -o [ -z "$lang" -a "$langcode" == "en" ]; then continue; fi
		GetHotkey
		menuentry "[${hotkey}] ${langname}" "$langcode" --hotkey="${hotkey}" {
			lang="$2"
			save_env lang
			configfile ${prefix}/grub.cfg
		}
	done
	ReturnMainMenu;
}

#function changeroot {
#	changeroot.cfg
#}

#function partimgmapper {
#	partimgmapper.cfg
#}

#function parttoolfunc {
#	PartitionTool.cfg
#}

#function partimgpartition {
#	partimgpartition.cfg
#}

#function searchcfg {
#	searchcfg.cfg
#}

function GetHotkey {
	if [ "$hotkey" != "." ]; then
		set hotkeys="_0123456789adfghijklmnopqrstuwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`=,."
		regexp -s hotkey "${hotkey}(.)" "$hotkeys"
	fi
}

function FileProcessing {
	file="$1"
	filename="$2"
	file_ext="$3"
	
	tr -D -s file_ext "$file_ext" 
	regexp -s 1:loopdev -s 2:path '\((.*)\)(.*)' "$file"
	
	if [ "$file_ext" == "iso" ]; then
		loopback isoloop "$file"
		if [ -e "(isoloop)/sources/install.wim" ] -o [ -e "(isoloop)/sources/install.esd" ]; then
			set winiso="$path"
			save_env winiso
			wimbootwinsetup "(isoloop)/sources/boot.wim"
		elif [ -e (isoloop)/x64/sources/install.esd ] -o [ -e (isoloop)/x64/sources/install.wim ] 	\
				-o	\
				[ -e (isoloop)/x86/sources/install.esd ] -o [ -e (isoloop)/x86/sources/install.wim ]; then
						if [ -n "$pc" ]; then
							if [ -e (isoloop)/x64/sources/boot.wim ]; then
								submenu "Windows [64-bit]" "$path" {
									set winiso="$2"
									save_env winiso
									wimbootwinsetup (isoloop)/x64/sources/boot.wim
								}
							else set timeout=0; fi
							if [ -e (isoloop)/x86/sources/boot.wim ]; then
								submenu "Windows [32-bit]" "$path" {
									set winiso="$2"
									save_env winiso
									wimbootwinsetup (isoloop)/x86/sources/boot.wim
								}
							else set timeout=0; fi
						else
							set winiso="$path"
							save_env winiso
							wimbootwinsetup (isoloop)/x${_SPEC_UEFI_ARCH_2}/sources/boot.wim
						fi
		elif [ -e (isoloop)/I386/TXTSETUP.SIF ] -o [ -e (isoloop)/AMD64/TXTSETUP.SIF ]; then
			menuentry "${installxp} - ${stepmsg} 1" {
				if drivemap_to_hd0 "${root}" "g4droot"; then
					set g4d_cmd="root ${g4droot};${g4d_path}/INSTALLXP cd $path";
					linux	${g4d_path}/grub.exe --config-file=${g4d_cmd};
					initrd	${g4d_path}/winvblk.img;
				fi
			}
			menuentry "${installxp} - ${stepmsg} 2" {
				if drivemap_to_hd0 "${root}" "g4droot"; then
					set g4d_cmd="root ${g4droot};${g4d_path}/INSTALLXP hd $path";
					linux	${g4d_path}/grub.exe --config-file=${g4d_cmd};
					initrd	${g4d_path}/winvblk.img;
				fi
			}
		elif test -e (isoloop)/boot/grub/loopback.cfg -o -e (isoloop)/efi/boot/loopback.cfg -o -e (isoloop)/boot/grub/loopback.cfg; then
			for cfg in /boot/grub/loopback.cfg /efi/boot/loopback.cfg /EFI/BOOT/loopback.cfg; do
				if ! test -e (isoloop)$cfg; then continue; fi
				cat -s cfgtext (isoloop)$cfg
				if regexp ' /grub/grub.cfg' "$cfgtext"; then
					if ! test -e (isoloop)/grub/grub.cfg; then continue; fi
				fi
				if regexp '/casper/initrd.lz' "$cfgtext"; then
					if ! test -e (isoloop)/casper/initrd.lz; then continue; fi
				fi
				
				probe -u -s rootuuid $loopdev
				export rootuuid
				set iso_path="$path"
				export iso_path
				set root=isoloop
				configfile $cfg
				
				unset cfgtext
			done
		elif test -e (isoloop)/casper/filesystem.squashfs -a -e (isoloop)/casper/vmlinu* -a -e (isoloop)/casper/initr*; then
			for preseed in (isoloop)/preseed/*; do
				regexp -s preseed '\(isoloop\)(.*)' "$preseed"
				preseed="file=/cdrom/${preseed}"
				break
			done
			for vmlinuz in (isoloop)/casper/vmlinu*; do
				linux	$vmlinuz   ${preseed} boot=casper iso-scan/filename=${path} quiet splash ---
				unset vmlinuz
				break
			done
			for initrd in (isoloop)/casper/initr*; do
				initrd	$initrd
				unset initrd
				break
			done
		elif test -f (isoloop)/live/filesystem.squashfs -a -f (isoloop)/live/vmlinu* -a -f (isoloop)/live/initr*; then
			for vmlinuz in (isoloop)/live/vmlinu*; do
				linux	$vmlinuz   boot=live findiso=${path} components quiet splash
				unset vmlinuz
				break
			done
			for initrd in (isoloop)/live/initr*; do
				initrd	$initrd
				unset initrd
				break
			done
		elif test -f (isoloop)/arch/boot/intel_ucode.img -a -f (isoloop)/arch/boot/*/archiso.img -a -f (isoloop)/arch/boot/*/vmlinuz; then
			probe -u -s devuuid $path
			for vmlinuz in (isoloop)/arch/boot/*/vmlinuz; do
				linux	$vmlinuz img_loop=${path} img_dev=/dev/disk/by-uuid/$devuuid earlymodules=loop
				unset vmlinuz
				unset devuuid
				break
			done
			for initrd in (isoloop)/arch/boot/*/archiso.img; do
				initrd	(isoloop)/arch/boot/intel_ucode.img $initrd
				unset initrd
				break
			done
		elif test -f (isoloop)/antiX/vmlinu* -a -f (isoloop)/antiX/initr*; then
			for vmlinuz in (isoloop)/antiX/vmlinu*; do
				linux	$vmlinuz quiet fromiso=${path} from=usb,cd,hd
				unset vmlinuz
				break
			done
			for initrd in (isoloop)/antiX/initr*; do
				initrd	$initrd
				unset initrd
				break
			done
		elif test -e (isoloop)/rescue/livecd.squashfs -a -e (isoloop)/boot/kernel.x86_64-efi -a -e (isoloop)/boot/initfs.x86_64-efi	\
		-a -e (isoloop)/boot/kernel.i386-pc -a -e (isoloop)/boot/initfs.i386-pc; then
			if cpuid -l; then set arch="x86_64-efi"; else set arch="i386-pc"; fi
			linux	(isoloop)/boot/kernel.${arch} root=/dev/ram0 real_root=/dev/loop0 loop=/rescue/livecd.squashfs cdroot_marker=/rescue/livecd.squashfs initrd udev cdroot scandelay=10 quiet splash isoboot=${path} lang=en
			initrd	(isoloop)/boot/initfs.${arch}
		elif test -e (isoloop)/pmagic/m64.img -a -e (isoloop)/pmagic/m32.img -a -e (isoloop)/pmagic/bzImage64 -a -e (isoloop)/pmagic/bzImage	\
		-a -e (isoloop)/pmagic/fu.img -a -e (isoloop)/pmagic/initrd.img; then
			if cpuid -l; then set bz="bzImage64"; set m="m64.img"; else set bz="bzImage"; set m="m32.img"; fi
			linux	(isoloop)/pmagic/${bz} edd=on vga=normal iso_filename=${path}
			initrd	(isoloop)/pmagic/initrd.img (isoloop)/pmagic/fu.img (isoloop)/pmagic/${m}
		elif test -e (isoloop)/image.squashfs -a -e (isoloop)/livecd -a -e (isoloop)/isolinux/gentoo -a -e (isoloop)/isolinux/gentoo.igz; then
			linux	(isoloop)/isolinux/gentoo root=/dev/ram0 init=/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot vga=791 isoboot=${path} 
			initrd	(isoloop)/isolinux/gentoo.igz
		elif test -e (isoloop)/image.squashfs -a -e (isoloop)/livecd -a -e (isoloop)/isolinux/gentoo -a -e (isoloop)/isolinux/gentoo.xz; then
			linux	(isoloop)/isolinux/gentoo root=/dev/ram0 init=/linuxrc dokeymap aufs looptype=squashfs loop=/image.squashfs cdroot console=tty1 isoboot=${path}
			initrd	(isoloop)/isolinux/gentoo.xz
		elif test -e (isoloop)/slax/boot/vmlinuz -a -e (isoloop)/slax/boot/initrfs.img; then
			linux	(isoloop)/slax/boot/vmlinuz vga=normal load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 slax.flags=automount from=${path}
			initrd	(isoloop)/slax/boot/initrfs.img
		elif test -e (isoloop)/liveslak -a -e (isoloop)/boot/generic -a -e (isoloop)/boot/initrd.img; then
			probe -u -s deviceuuid $loopdev
			linux	(isoloop)/boot/generic load_ramdisk=1 prompt_ramdisk=0 rw printk.time=0 kbd=us tz=localtime locale=us_EN.utf8 livemedia=/dev/disk/by-uuid/${deviceuuid}:${path}
			initrd	(isoloop)/boot/initrd.img
		elif test -e (isoloop)/wifislax64 -a -e (isoloop)/boot/vmlinuz -a -e (isoloop)/boot/initrd.xz; then
			probe -u -s deviceuuid $loopdev
			linux	(isoloop)/boot/vmlinuz kbd=us tz=US/Pacific locale=en_US.utf8 xkb= rw livemedia=/dev/disk/by-uuid/${deviceuuid}:${path}
			initrd	(isoloop)/boot/initrd.xz
		elif test -e (isoloop)/wifislax -a -e (isoloop)/boot/vmlinuz -a -e (isoloop)/boot/initrd.xz; then
			submenu "[1] Wifislax With KDE Desktop" "$path" --hotkey="1" {
				linux	(isoloop)/boot/vmlinuz noload=000-SMP\;006-Xfce load=English from=${2}
				initrd	(isoloop)/boot/initrd.xz
			}
			submenu "[2] Wifislax With Xfce Desktop" "$path" --hotkey="2" {
				linux	(isoloop)/boot/vmlinuz noload=000-SMP\;005-Kde load=English from=${2}
				initrd	(isoloop)/boot/initrd.xz
			}
		elif test -e (isoloop)/suse -a -e (isoloop)/boot/*/loader/initrd -a -e (isoloop)/boot/*/loader/linux; then
			for vmlinuz in (isoloop)/boot/*/loader/linux; do
				if ! test -e $vmlinuz; then continue; fi
				break
			done
			for initrd in (isoloop)/boot/*/loader/initrd; do
				if ! test -e $initrd; then continue; fi
				break
			done
			submenu "[1] Installation" "$path" "$vmlinuz" "$initrd" --hotkey=1 {
				linux	${3} splash=silent install=hd:${2}
				initrd	${4}
			}
			submenu "[2] Upgrade" "$path" "$vmlinuz" "$initrd" --hotkey=2 {
				linux	${3} splash=silent upgrade=1 install=hd:${2}
				initrd	${4}
			}
			unset vmlinuz
			unset initrd
		else
			for cfg in /boot/grub/grub.cfg /EFI/BOOT/grub.cfg /EFI/boot/grub.cfg /boot/grub2/grub.cfg	\
				/efi/boot/grub.cfg /isolinux/live.cfg /boot/isolinux/isolinux.cfg /slax/boot/syslinux.cfg /isolinux/txt.cfg; do
				if ! test -e (isoloop)$cfg; then continue; fi
				cat -s cfgtext (isoloop)$cfg
				if regexp 'iso_path' "$cfgtext"; then
					probe -u -s rootuuid $loopdev
					export rootuuid
					set iso_path="$path"
					export iso_path
					set root=isoloop
					configfile $cfg
				elif regexp 'boot=casper' "$cfgtext"; then
					if test -f (isoloop)/casper/filesystem.squashfs -a -f (isoloop)/casper/vmlinu* -a -f (isoloop)/casper/initr*; then
						for preseed in (isoloop)/preseed/*; do
							regexp -s preseed '\(isoloop\)(.*)' "$preseed"
							preseed="file=/cdrom/${preseed}"
							break
						done
						for vmlinuz in (isoloop)/casper/vmlinu*; do
							linux	$vmlinuz   ${preseed} boot=casper iso-scan/filename=${path} quiet splash ---
							unset vmlinuz
							break
						done
						for initrd in (isoloop)/casper/initr*; do
							initrd	$initrd
							unset initrd
							break
						done
					fi
				elif regexp 'boot=live' "$cfgtext"; then
					if test -f (isoloop)/live/filesystem.squashfs -a -f (isoloop)/live/vmlinu* -a -f (isoloop)/live/initr*; then
						if regexp 'menuentry "Clonezilla' "$cfgtext"; then
							set params="union=overlay username=user config noswap edd=on nomodeset locales= keyboard-layouts= ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch="no" vga=788 ip= net.ifnames=0  nosplash i915.blacklist=yes radeonhd.blacklist=yes nouveau.blacklist=yes vmwgfx.enable_fbdev=1";
						elif regexp 'menuentry "GParted' "$cfgtext"; then
							set params="union=overlay username=user config noswap  ip= net.ifnames=0  nosplash";
						else
							set params="splash"
						fi
						for vmlinuz in (isoloop)/live/vmlinu*; do
							linux	$vmlinuz   boot=live findiso=${path} components quiet ${params}
							unset vmlinuz
							break
						done
						for initrd in (isoloop)/live/initr*; do
							initrd	$initrd
							unset initrd
							break
						done
					fi
				elif regexp 'rd.live.image' "$cfgtext"; then
					if test -d (isoloop)/LiveOS; then
						set isodev="UUID"
						if test -f (isoloop)/images/pxeboot/vmlinu* -a -f (isoloop)/images/pxeboot/initr*; then set bootpath="/images/pxeboot";
						elif test -f (isoloop)/isolinux/vmlinu* -a -f (isoloop)/isolinux/initr*; then set bootpath="/isolinux";
						elif test -f (isoloop)/boot/*/loader/linu* -a -f (isoloop)/boot/*/loader/initr*; then
							for bootpath in /boot/*/loader; do
								if test -d (isoloop)$bootpath; then set isodev="CDLABEL"; break; fi
							done
						fi
					fi
					if [ -n "$bootpath" ]; then 
						if [ "$isodev" == "UUID" ]; then probe -u -s isouuid isoloop; else probe -l -s isouuid isoloop; fi
						for vmlinuz in (isoloop)${bootpath}/vmlinu* (isoloop)${bootpath}/linu*; do
							if ! test -e $vmlinuz; then continue; fi
							linux	$vmlinuz   root=live:${isodev}=${isouuid} rd.live.image quiet iso-scan/filename=${path}
							unset vmlinuz
							unset isouuid
							break
						done
						for initrd in (isoloop)${bootpath}/initr*; do
							if ! test -e $initrd; then continue; fi
							initrd	$initrd
							unset initrd
							break
						done
						unset isodev
						unset bootpath
					fi
				elif regexp 'inst.stage2=hd:' "$cfgtext"; then
					if test -f (isoloop)/images/pxeboot/vmlinu* -a -f (isoloop)/images/pxeboot/initr* -a -d (isoloop)/LiveOS; then
						probe -u -s isouuid isoloop
						for vmlinuz in (isoloop)/images/pxeboot/vmlinu*; do
							linux	$vmlinuz   inst.stage2=hd:UUID=${isouuid} rd.live.image quiet iso-scan/filename=${path}
							unset vmlinuz
							unset isouuid
							break
						done
						for initrd in (isoloop)/images/pxeboot/initr*; do
							initrd	$initrd
							unset initrd
							break
						done
					fi
				elif regexp "initrd=/boot/initrd.gz root=/dev/ram0 vga=normal" "$cfgtext"; then
					if test -f (isoloop)/boot/initrd.gz -a -f (isoloop)/boot/bzImage; then
						linux	(isoloop)/boot/bzImage root=/dev/ram0 vga=normal
						initrd	(isoloop)/boot/initrd.gz
					fi
				elif regexp "tinycore.gz" "$cfgtext"; then
					set root=isoloop
					if regexp 'isolinux.cfg' "$cfg"; then syslinux_configfile $cfg; else configfile $cfg; fi
				fi
			done
		fi
	elif [ "$file_ext" == "wim" ]; then
		if wimtools --exist "${file}" \\Windows\\System32\\winload.exe; then
			ntbootcmd "${file}" "$file_ext"
		elif [ wimtools --exist "${file}" \\I386\\System32\\cmd.exe ] -a [ -n "$pc" ]; then
			grub4dosroot
			set fullpath="${g4droot}${path}"
			set opt="${g4d_path}/bootvhd.g4b PE1 ${fullpath}"
			linux ${g4d_path}/grub.exe --config-file=${opt}
		fi
	elif [ "$file_ext" == "vhd" ] -o [ "$file_ext" == "vhdx" ]; then
		set timeout=0
		menuentry "[1] Windows 10/8.1/7/Vista (NT6)" "${file}" "$file_ext" --hotkey="1" {
			ntbootcmd "${2}" "${3}"
		}
		if [ -n "$pc" ]; then
			unset timeout
			menuentry "[2] Windows XP/2003 (NT5)" "${path}" --hotkey="2" {
				grub4dosroot
				set fullpath="${g4droot}${2}"
				set opt="${g4d_path}/bootvhd.g4b NT5 ${fullpath}"
				linux ${g4d_path}/grub.exe --config-file=${opt}
			}
		fi
	fi
	
	if [ "$file_ext" == "iso" ] -o [ "$file_ext" == "partimg" ] -o [ "$file_ext" == "img" ] -o [ "$file_ext" == "ufs" ] -o [ "$file_ext" == "hfs" ] -o [ "$file_ext" == "squashfs" ] -o [ "$file_ext" == "sfs" ] -o [ "$file_ext" == "ima" ] -o [ "$file_ext" == "gz" ]; then
		set timeout=0
		if [ -n "$pc" ]; then
			submenu "${bootwith} Grub4dos" "$file" "$file_ext" "$path" {
				if [ "$3" == "iso" ]; then set boottype="bootiso"; else set boottype="bootraw"; fi
				grub4dosroot
				set fullpath="${g4droot}${path}"
				set opt="${g4d_path}/${boottype}.g4b ${fullpath}"
				linux ${g4d_path}/grub.exe --config-file=${opt}
			}
			unset timeout
		fi
		submenu "${openwith} Loopback" "$file" {
			unset timeout
			loopback isoloop "$2"
			FileManager (isoloop)
		}
	elif [ "$file_ext" == "efi" ] -a [ -n "$efi" ]; then
		if file --is-x86_64-efi "$file"; then set filearch="64"; else set filearch="32"; fi
		if [ "$_SPEC_UEFI_ARCH_3" != "$filearch" ]; then
			esc 1 "$efi3264msg"
			return 0
		fi
		chainloader "$file"
	elif [ "$filename" == "grub.cfg" ]; then
		if [ -d (${loopdev})/boot/grub ]; then
			set root=${loopdev}
			set prefix=/boot/grub
			configfile "$file"
		fi
	fi
}

function FileManager {
	echo "${gettinglist}"
	set hotkey="_"
	GetHotkey
	submenu "[${hotkey}] ... ${1}" "$1" --hotkey="${hotkey}" {
		regexp -s subdir ".*\/(.*)" "$2"
		if [ "$subdir" ]; then
			unset subdir
			regexp -s parentdir "(.*)\/.*" "$2"
			FileManager "$parentdir"
		else
			if regexp '[^(]isoloop\)' "$2"; then
				loopback -d isoloop
			fi
			configfile ${prefix}/FileManager.cfg
		fi
	}
	for file in $1/*; do
		regexp -s filename ".*\/(.*)" "$file"
		if test -d "$file"; then
			if [ "$filename" == "System Volume Information" ] -o [ "$filename" == "system volume information" ] -o [ "$filename" == "lost+found" ]	\
			-o [ "$filename" == "\$Extend" ] -o [ "$filename" == "\$extend" ] -o [ "$filename" == "\$Recycle.Bin" ] -o [ "$filename" == "\$recycle.bin" ]	\
			-o [ "$filename" == "\$RECYCLE.BIN" ] -o [ "$filename" == "pagefile.sys" ] -o [ "$filename" == "swapfile.sys" ]; then continue; fi
			GetHotkey
			submenu "[${hotkey}] ${filename}..." "$file" --hotkey="${hotkey}" {
				FileManager "${2}"
			}
		elif test -f "$file"; then
			if ! regexp -s file_ext ".*\.(.*)" "$file"; then continue; fi
			if [ -n "$file_ext_args" ]; then
				set _ok="0"
				for _file_ext in $file_ext_args; do
					if [ "$_file_ext" == "$file_ext" ]; then set _ok="1"; break; fi
				done
				unset _file_ext
				if [ "$_ok" == "0" ]; then continue; fi
			fi
			if [ -n "$file_in_loop_args" ]; then
				set _ok="0"
				loopback isoloop "$file"
				for _file_in_loop in $file_in_loop_args; do
					if [ -e "(isoloop)${_file_in_loop}" ]; then set _ok="1"; break; fi
				done
				loopback -d isoloop
				unset _file_in_loop
				if [ "$_ok" == "0" ]; then continue; fi
			fi
			GetHotkey
			submenu "[${hotkey}] ${filename}" "$file" "$filename" "$file_ext" --hotkey="${hotkey}" {
				FileProcessing "$2" "$3" "$4"
			}
		fi
		unset filename
	done
	ReturnMainMenu;
}

function setdefault {
  if [ -z "${boot_once}" ]; then
	if [ x"${1}" = x ]; then
		saved_entry=
	elif [ -z "${chosen}" ]; then
		saved_entry="${1}"
	else
		saved_entry="${chosen}>${1}"
	fi
	if [ -e ${prefix}/grubenv_${grub_platform} ]; then
		save_env --file ${prefix}/grubenv_${grub_platform} saved_entry
	else
		save_env saved_entry
	fi
	configfile $prefix/grub.cfg
  fi
}

function settimeout {
  set timeout=${1}
  save_env timeout
}

function ReturnMainMenu {
	menuentry "[b] ${backcfg} [${press} B]" --hotkey=b {
		configfile ${prefix}/Main.cfg
	}
}

function memdiskcmd {
	booting "${1}"
	
	regexp -s file_ext ".*\.(.*)" "$1"
	tr -D -s file_ext "$file_ext" 
	
	if [ "$file_ext" == "iso" ]; then
		set param="iso raw"
	elif [ "$file_ext" == "img" ] -o [ "$file_ext" == "ima" ]; then
		set param="fd raw"
	else
		set param="raw"
	fi
	
	linux16 ${memdisk} ${param}
	initrd16 "${1}"
}